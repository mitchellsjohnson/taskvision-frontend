# TaskVision Frontend - Cursor AI Rules

## Project Overview
TaskVision is a full-stack task management application. This is the React frontend built with TypeScript, Auth0, and modern React patterns.

## Architecture & Tech Stack
- **Framework**: React 18 with TypeScript
- **Authentication**: Auth0 React SDK (`@auth0/auth0-react`)
- **Routing**: React Router DOM
- **State Management**: React hooks + Context API
- **Styling**: CSS + Bootstrap 5 + Custom CSS
- **Build Tool**: Create React App
- **Testing**: Jest + React Testing Library
- **API Client**: Axios

## Development Environment Setup
- **Frontend Port**: http://localhost:4040
- **Backend API**: http://localhost:6060
- **Full-Stack Development**: Use `cd .. && ./dev-start.sh` to run complete environment
- **Frontend Only**: Not recommended - always use unified development scripts

### Development Scripts (Located in Parent Directory)
- **Start All Services**: `cd .. && ./dev-start.sh`
- **Stop All Services**: `cd .. && ./dev-stop.sh`
- **Never start frontend alone** - always use unified development scripts

### Related Services
- Backend: Express.js API on http://localhost:6060
- DynamoDB Local: http://localhost:8000 (managed by dev scripts)

## Code Standards & Patterns

### React & TypeScript
- **Functional components only** - No class components
- **TypeScript strict mode** - Always use explicit typing
- **Hooks over HOCs** - Use React hooks for state and lifecycle
- **Custom hooks** - Extract reusable logic into custom hooks
- **Props interfaces** - Always define interfaces for component props

### Component Structure
```typescript
interface ComponentProps {
  // Always define prop types
}

export const Component: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  // Hooks at the top
  // Event handlers
  // Render logic
  return <div></div>;
};
```

### State Management
- **useState** for local component state
- **useContext** for shared state across components
- **useReducer** for complex state logic
- **Custom hooks** for reusable stateful logic

### Authentication with Auth0
- Use `useAuth0()` hook for authentication state
- Protect routes with `<ProtectedRoute>` component
- Include JWT tokens in API requests
- Handle loading and error states properly

### API Integration
- **Services pattern**: API calls in `/services` directory
- **Axios client**: Configured with base URL and interceptors
- **Error handling**: Consistent error handling across API calls
- **Loading states**: Always handle loading/error/success states

## File Organization
```
src/
├── app.tsx                     # Main app component
├── index.tsx                   # App entry point
├── components/                 # Reusable components
│   ├── auth0-feature.tsx       # Auth0 components
│   ├── navigation/             # Navigation components
│   ├── buttons/                # Button components
│   ├── forms/                  # Form components
│   └── __tests__/              # Component tests
├── pages/                      # Page components
├── services/                   # API service layer
├── hooks/                      # Custom React hooks
├── contexts/                   # React context providers
├── models/                     # TypeScript type definitions
├── constants/                  # App constants
├── utils/                      # Utility functions
└── styles/                     # CSS and styling
```

## Styling Approach
- **Bootstrap 5** as base framework
- **Custom CSS** for component-specific styles
- **CSS Modules pattern** for some components
- **Responsive design** - Mobile-first approach
- **Dark mode support** via theme context

### CSS Organization
```
styles/
├── styles.css                 # Main stylesheet
├── theme.css                  # Theme and color variables
├── components/                # Component-specific styles
└── general.css                # General utilities
```

## Component Patterns

### Page Components
- Located in `/pages` directory
- Handle route-level logic and layout
- Connect to API services
- Manage page-level state

### Feature Components
- Reusable business logic components
- Located in `/components` by feature
- Accept props for configuration
- Include proper error boundaries

### Form Handling
- Use controlled components
- Implement proper validation
- Handle submission and error states
- Use TypeScript for form data types

### Navigation
- Desktop and mobile navigation components
- Role-based navigation visibility
- Auth0 integration for login/logout

## Testing Standards
- **Test files**: `*.test.tsx` or in `__tests__/` directories
- **React Testing Library** for component testing
- **Mock Auth0** using custom mock in `__mocks__`
- **User interaction testing** - Test behavior, not implementation
- **API mocking** for service tests

### Test Patterns
```typescript
// Component testing pattern
describe('ComponentName', () => {
  it('should render correctly', () => {
    render(<ComponentName />);
    expect(screen.getByText('Expected text')).toBeInTheDocument();
  });
});
```

## Auth0 Integration Patterns
```typescript
// In components
const { user, isAuthenticated, loginWithRedirect, logout } = useAuth0();

// Protected routes
<ProtectedRoute>
  <ProtectedComponent />
</ProtectedRoute>

// API calls with token
const { getAccessTokenSilently } = useAuth0();
const token = await getAccessTokenSilently();
```

## Common Features & Components
- **Task Management**: Task cards, forms, grids
- **Search & Filtering**: Search bars, filter pills, date filters
- **Navigation**: Desktop/mobile nav, breadcrumbs
- **Forms**: Task forms, validation, character counters
- **UI Components**: Modals, dropdowns, tags, tooltips
- **Wellness Tracking**: Charts and grids for wellness data
- **AI Agent**: Thread sidebar and chat interface

## API Service Pattern
```typescript
// services/api-name.ts
export const apiService = {
  async getData(): Promise<DataType[]> {
    const response = await axios.get('/api/endpoint');
    return response.data;
  }
};
```

## Environment Configuration - IMPORTANT CONVENTION
- **Development**: Points to localhost:6060 backend
- **Production**: Points to deployed AWS Lambda backend
- **Auth0**: Configured via environment variables
- **Environment files**: ALWAYS use `.env.local` for local development (not .env.development)
- **NOTE**: Both frontend and backend use `.env.local` for local development

## AI Assistant Instructions
- Always use functional components with TypeScript
- Follow the existing component structure and patterns
- Use Auth0 hooks for authentication logic
- Reference existing components for consistent styling
- Implement proper error handling and loading states
- Use the established API service patterns
- For full-stack development, use `cd .. && ./dev-start.sh` from project root
- Follow responsive design principles
- Include proper accessibility attributes
- Test components using React Testing Library patterns 

## MCP tool usage
When adding dependencies to the system, make sure to leverage seaworthy tools to determine the best versions to use

## Environment File Convention - CRITICAL
- **ALWAYS use `.env.local`** for both frontend and backend local development
- **NEVER use `.env.development`** or other environment file patterns
- **This is a project-wide standard** that must be followed consistently

## Environment Variable Authority - CRITICAL
- **NEVER add environment variables** to scripts, code, or .env files without explicit user permission and discussion
- **Port Configuration**: Scripts should use hardcoded ports for DynamoDB Local, frontend, and backend
- **Always discuss before modifying** any environment configuration